name: 'Reliably Plan Workflow'
description: 'Run a Reliably Plan'
author: 'Reliably'
branding:
  icon: "check-circle"
  color: "red"
inputs:
  github-token:
    description: "The GitHub token to commit the results"
    required: true
  reliably-service-token:
    description: "Reliably service (user) authentication token"
    required: true
  working-dir:
    description: "The directory where the plan will be run from"
    required: true
    default: "./plans"
  plan-id:
    description: "The identifier of the executed plan"
    required: true
  org-id:
    description: "The identifier of the organization owning the plan"
    required: true
  reliably-experiment-extra:
    description: "A json encoded object to be added to the result of the run"
    required: false
  python-version:
    description: "The python version to use"
    required: false
    default: "3.11"
  reliably-host:
    description: "The hostname of the Reliably server"
    required: false
    default: "app.reliably.com"
runs:
  using: "composite"
  steps:
    - name: Notify running status
      shell: bash
      run: |
        curl -s --http2 -X PUT \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ inputs.reliably-service-token }}" \
          -d '{"status":"running"}' \
          https://${{ inputs.reliably-host }}/api/v1/organization/${{ inputs.org-id }}/plans/${{ inputs.plan-id }}/status
        echo "PLAN_STATUS=running" >> $GITHUB_ENV

    - name: Fetch Dependencies Lock
      shell: bash
      run: |
        curl -o pdm.lock --silent https://raw.githubusercontent.com/reliablyhq/actions/main/pdm.lock

    - name: Set up PDM
      uses: pdm-project/setup-pdm@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: true
        prerelease: true
    
    - name: Create directory to hold results and logs
      shell: bash
      run: mkdir -p ${{ inputs.working-dir }}

    - name: Add repository top-level ~/bin directory to the PATH
      shell: bash
      run: |
        mkdir -p $HOME/bin
        echo "Adding $HOME/bin to PATH"
        echo "PATH=$PATH:$HOME/bin" >> $GITHUB_ENV
        ls -la $HOME/bin

    - name: Install Dependencies
      shell: bash
      run: |
        curl -o pyproject.toml --silent https://raw.githubusercontent.com/reliablyhq/actions/main/pyproject.toml
        pdm sync --no-editable --no-self
        pdm info

        # to authenticate to AWS EKS clusters
        curl -s -Lo $HOME/bin/aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.6.2/aws-iam-authenticator_0.6.2_linux_amd64
        chmod +x $HOME/bin/aws-iam-authenticator

    - name: Run
      working-directory: ${{ inputs.working-dir }}
      shell: bash
      env:
        RELIABLY_SERVICE_TOKEN: ${{ inputs.reliably-service-token }}
        RELIABLY_ORGANIZATION_ID: ${{ inputs.org-id }}
        RELIABLY_SERVICE_HOST: https://${{ inputs.reliably-host }}
        RELIABLY_PLAN_ID: ${{ inputs.plan-id }}
        RELIABLY_EXECUTION_EXTRA: ${{ inputs.reliably-experiment-extra }}
      run: |
        $GITHUB_WORKSPACE/.venv/bin/reliably service plan execute --log-stdout --log-file run.log --load-environment --set-status --result-file run.json ${{ inputs.plan-id }}
        echo "PLAN_STATUS=finished" >> $GITHUB_ENV

    - name: Store results
      if: success() || failure()
      working-directory: ${{ inputs.working-dir }}
      shell: bash
      run: |
        export EXECUTION_URL=$(cat run.json | jq -r '.experiment.extensions[] | select(.name=="reliably") | .execution_url')

        pdm list --markdown --fields name,version,homepage > dependencies.md
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git add run.log run.json dependencies.md
        git commit -s -m "Plan ${{ inputs.plan-id }} execution" -m "Visit ${EXECUTION_URL}"
        git pull --rebase origin main
        git push
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GITHUB_ACTOR: ${{ github.actor }}

    - name: Update Plan Status
      if: failure()
      shell: bash
      run: |
        # in case the build failed before the reliably cli got executed
        if [[ "$PLAN_STATUS" == "running" ]]; then
          curl -s --http2 -X PUT \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ inputs.reliably-service-token }}" \
            -d '{"status":"error", "error": "Workflow failed"}' \
            https://${{ inputs.reliably-host }}/api/v1/organization/${{ inputs.org-id }}/plans/${{ inputs.plan-id }}/status
        fi
